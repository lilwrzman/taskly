// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ItemStatus {
  TODO
  ONPROGRESS
  COMPLETED
}

enum ProjectRole {
  LEADER
  MEMBER
  GUEST
}

enum ProjectScope {
  PUBLIC
  PRIVATE
}

model User {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  image     String      @default("/image/default.png")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Project   Project[]
  Item      Item[]
  MyProject MyProject[]
}

model Board {
  id        Int      @id @default(autoincrement())
  title     String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Item      Item[]
}

model Item {
  id             Int           @id @default(autoincrement())
  content        String
  description    String?
  status         ItemStatus    @default(TODO)
  board          Board?        @relation(fields: [boardId], references: [id])
  boardId        Int?
  user           User?         @relation(fields: [userId], references: [id])
  userId         Int?
  itemCategory   ItemCategory? @relation(fields: [itemCategoryId], references: [id])
  itemCategoryId Int?
  start          DateTime?
  end            DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model ItemCategory {
  id        Int      @id @default(autoincrement())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId Int
  category  String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Item      Item[]
}

model Project {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  user         User           @relation(fields: [authorId], references: [id])
  authorId     Int
  projectScope ProjectScope   @default(PRIVATE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ItemCategory ItemCategory[]
  MyProject    MyProject[]
  Board        Board[]
}

model MyProject {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  project    Project     @relation(fields: [projectId], references: [id])
  projectId  Int
  role       ProjectRole @default(LEADER)
  isFavorite Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
